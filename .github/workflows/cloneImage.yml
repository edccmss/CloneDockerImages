
# This is a basic workflow to help you get started with Actions

name: cloneImage

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

  # Allows you to run this workflow manually from the Actions tab
  # 允许您从“操作”选项卡手动运行此工作流(只允许对默认分支手动执行)
  workflow_dispatch:
    inputs:
      log_Level:
        description: 'Log level'
        required: true
        default: 'warning'
        type: string
      #environment:
        #description: 'Environment to run tests against'
        #type: environment
        #required: true
env:
  NAME: "env_name"
  env_var: ${{ vars.ENV_CONTEXT_VAR }}
  INPUT_LOG_LEVEL: ${{ github.event.inputs.log_Level }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo "Log level: ${{ vars.FOO }}"
          echo "Tags: ${{ vars.FOO }}"
          echo "Environment: $DESCRIPTION"
          echo "INPUT_LOG_LEVEL: $INPUT_LOG_LEVEL"
          #docker info
          #npm -v
          pwd
          ls -al
        env:
          #LEVEL: ${{ inputs.logLevel }}
          #TAGS: ${{ inputs.tags }}
          DESCRIPTION: ${{ vars.DESCRIPTION }}

      - name: Pull images
        run: |
          for item in $(cat images)
          do
            echo "正在拉取 $item 镜像"
            docker pull $item
            if [ $? -ne 0 ];then
              echo "镜像 $item 拉取失败，将不会推送到你的私人仓库"
              echo $item |sed "s#\/#\\\\\\\/#"|xargs -L1 bash -c 'sed -i "/$0/d" images'
            fi
          done

      - name: Change image name and push
        run: |
          echo ${{ secrets.HUB_PWD }} | docker login ${{ vars.REGISTRY }} -u ${{ vars.HUB_USER }} --password-stdin
          for item in $(cat images)
          do
            export ImageName=$(echo $item | awk -F / '{print $NF}')
            #IM=$(echo $item | awk -F / '{print $NF}')
            echo "image_name1:$IM,2${IM},ImageName:${ImageName}"
            echo "准备推送 $item 镜像"
            export NewImageName=${{ vars.REGISTRY }}/${{ vars.NAMESPACE }}/$ImageName
            docker  tag  $item    $NewImageName
            docker push $NewImageName
            if [ $? -ne 0 ];then
              echo "镜像 $NewImageName 推送失败"
              echo $item |sed "s#\/#\\\\\\\/#"|xargs -L1 bash -c 'sed -i "/$0/d" images'
            fi
          done

